An ‘int’ type variable in C language is able to store only numbers till 2147483647. Beyond this number ‘int’ fails to store precisely and even not correctly./n
The Below code is also correct but not a good practise. it is never a good idea to use “void main()” or just “main()” as it doesn’t confirm standards. It may be allowed by some compilers though.Difference between “int main()” and “int main(void)” in C/C++?
In C++, both fun() and fun(void) are same.
 in C, int main() can be called with any number of arguments, but int main(void) can only be called without any argument. 
#include <stdio.h>
main()
{
    printf("Hello World");
}/n
Difference between “int main()” and “int main(void)” in C/C++?
In C++, both fun() and fun(void) are same.
In C, int main() can be called with any number of arguments, but int main(void) can only be called without any argument. /n
In a C program, all lines that start with # are processed by preprocessor which is a special program invoked by the compiler. In a very basic term, preprocessor takes a C program and produces another C program without any #./n
Interesting Facts about Macros and Preprocessors in C
COMPLIER SE BHI PEHLE PREPROCESSOR KA PROGRAM RUN HOTA HAI. JO .C PROGRAM SE EK NEW .C PROGRAM BANANA HAI ,JISME SARE PREPROCESSOR COMANDS (ALWAYS STARTING WITH #) KO EXCECUTE KRDETA HAI ,
JESE IN .C PROGRAM WE WRITE #INCLUDE<STDIO.H> TO VO EK NEW PROGRAM BNA DEGA OR USME STDIO.H FILE INLCULDED HOGI AND ETC....
EG. OF PREPROCESSOR CMNDS 
#INDLUDE <STDIO.H>
#DEFINE PI 3.14   (HERE PI IS MACROS)
#UNDEF PI (REMOVE THE PRESENCE OF PI)
WE CAN ALSO USE LIKE #INCLUDE SUM(A,B) A+B
IN PROGRAM WE CAN USE SUM(2+3)--> IT GIVES 5    /n
There are some standard macros which can be used to print program file (__FILE__), Date of compilation (__DATE__), Time of compilation (__TIME__) and Line Number in C code (__LINE__)
/N
When a constant value starts with 0, it is considered as octal number. Therefore the value of x is 3*8 + 2 = 26
/N
int var_9 = 1; //VALID
int 9_var = 2; //INVALID
int _ = 3;   //VALID :)
In C language, a variable name can consists of letters, digits and underscore i.e. _ . But a variable name has to start with either letter or underscore. It can't start with a digit. So valid variables are var_9 and _ from the above question. Even two back to back underscore i.e. __ is also a valid variable name. Even _9 is a valid variable. But 9var and 9_ are invalid variables in C. This will be caught at the time of compilation itself. T
 /N
 When a local variable is defined, it is not initialized by the system, you must initialize it yourself. 
 Global variables are initialized automatically by the system when you define them as follows −

Data Type	Initial Default Value
int	       0
char	      '\0'
float	     0
double	    0
pointer   	NULL
/n

In C, static and global variables are initialized by the compiler itself. 
/N
“float”, “double” and “long double”, the right format specifiers are %f, %lf and %Lf 
/N
 signed s;
 unsigned u;
 long l;
 long long ll;
 All of the above variable definitions are correct because int is implicitly assumed in all of these.
/N
 MODIFIERS IN C
 long
 short 
 signed
 unsigned
 long long
/N

1. If no data type is given to a variable, the compiler automatically converts it to int data type.
2. Signed is the default modifier for char and int data types.
3. We can’t use any modifiers in float data type. If programmer tries to use it ,the compiler automatically gives compile time error.
4. Only long modifier is allowed in double data types. We cant use any other specifier with double data type. If we try any other specifier, compiler will give compile time error.
/N

// An example of implicit conversion 
#include<stdio.h> 
int main() 
{ 
    int x = 10;    // integer x 
    char y = 'a';  // character c 
  
    // y implicitly converted to int. ASCII  
    // value of 'a' is 97 
    x = x + y; 
     
    // x is implicitly converted to float 
    float z = x + 1.0; 
  
    printf("x = %d, z = %f", x, z); 
    return 0; 
} 
Output:

x = 107, z = 108.000000
